plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'maven-publish'
}

loom {
    accessWidenerPath = new File("src/main/resources/" + project.artifact_id + ".accesswidener")
}

version = project.mod_version
group = project.group_id

base {
    archivesName = project.artifact_id
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://api.modrinth.com/maven" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    include(implementation('com.github.Carleslc.Simple-YAML:Simple-Yaml:1.8.4'))
    include(modImplementation("com.github.kianagit:kianalib-fabric:${project.kianalib_version}"))

    //addMod("modmenu", "9.0.0-pre.1", 0)
    modCompileOnly("maven.modrinth:modmenu:9.0.0-pre.1")

    //My old Library - I use this sometimes for migrating it to my new lib
    modCompileOnly("com.github.chloecdn:chloelib-fabric:cbd06a6001")
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

/**
 * Adds a mod from Modrinth to your mod.
 * @param name the "slug" of the mod, usually the name shown in the url of the mod-page.
 * @param version the version of the release
 * @param mod - Is this a mod or a library? Important to ensure loom remaps it properly in case.
 * @param state What to do with the mod.<br>
 * 0 = Use this if you want to add some specific mod-compat to your mod. This will make your mod compile properly even when the mod is not installed.<br>
 * 1 = Use this if you want to depend on a mod, or just want to use a mod in your IDE<br>
 * 2 = Use this if you want to include a mod into your jar. If you use Libraries, you may want to use this, so users don't need to install your library too.
 * @return
 */
def addMod(String name, String version, int state) {
    dependencies {
        if (state == 0) {
            modCompileOnly("maven.modrinth:" + name + ":" + version)
            return;
        }
        if (state == 1) {
            modImplementation("maven.modrinth:" + name + ":" + version)
            return;
        }
        if (state == 2) {
            include(modImplementation("maven.modrinth:" + name + ":" + version))
        }
    }
}